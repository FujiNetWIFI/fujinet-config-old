FEATURES {
    STARTADDRESS: default = $0706;
}

SYMBOLS {
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
    __NUM_SECTORS__: type = export, value = (__STARTUP_SIZE__ + __ONCE_SIZE__ + __CODE_SIZE__ + __DATA_SIZE__ + __RODATA_SIZE__) / 128 + 1;
}

MEMORY {
    ATRH:  file = %O, define = yes, start = $0000, size = $0010;
    BOOTH: file = %O, define = yes, start = $0000, size = $0006;
    ZP:         file = "", define = yes, start = $0082, size = $007E;    
# "main program" load chunk
    MAIN:       file = %O, define = yes, start = %S,    size = $7F80, fill = yes, fillval = $00;
    FIL:       file = %O, define = yes, start = $0000, size = $E87A, fill = yes, fillval = $00; 
}

SEGMENTS {
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    ATRHEADER: load = ATRH,       type = ro,  define = yes;
    BOOTHEADER: load = BOOTH,     type = ro,  define = yes;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized
    LOWCODE:   load = MAIN,       type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,       type = ro, define = yes,                optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       type = ro,  define = yes;
    DATA:      load = MAIN,       type = rw,  define = yes;
    INIT:      load = MAIN,       type = rw,                optional = yes;
    BSS:       load = MAIN,       type = bss, define = yes;
    FILL:      load = FIL,        type = ro, define = yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
